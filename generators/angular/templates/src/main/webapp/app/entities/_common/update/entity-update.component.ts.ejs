import { Component, OnInit } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { finalize, map } from 'rxjs/operators';

import { <%= entityAngularName %>, I<%= entityAngularName %> } from '../<%= entityFileName %>.model';
import { <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';
import { AlertError } from 'app/shared/alert/alert-error.model';
import { EventManager, EventWithContent } from 'app/core/util/event-manager.service';
import { DataUtils, FileLoadError } from 'app/core/util/data-util.service';
<%_ relationships.forEach(relationship => { _%>
import { I<%= relationship.otherEntityAngularName %> } from 'app/entities/<%= relationship.otherEntityPath %>/<%= relationship.otherEntityFileName %>.model';
import { <%= relationship.otherEntityAngularName %>Service } from 'app/entities/<%= relationship.otherEntityPath %>/service/<%= relationship.otherEntityFileName %>.service';
<%_ }); _%>

@Component({
  selector: '<%= jhiPrefix %>-<%= entityFileName %>-update',
  templateUrl: './<%= entityFileName %>-update.component.html',
  styleUrls: ['./<%= entityFileName %>-update.component.scss']
})
export class <%= entityAngularName %>UpdateComponent implements OnInit {
  isSaving = false;
  <%= entityInstance %>: I<%= entityAngularName %> | null = null;

  <%_ relationships.forEach(relationship => { _%>
  <%= relationship.otherEntityNamePlural.toLowerCase() %>Collection: I<%= relationship.otherEntityAngularName %>[] = [];
  <%_ }); _%>

  editForm = this.fb.group({
    <%_ fields.forEach(field => { _%>
    <%= field.fieldName %>: [null<% if (field.fieldValidate) { %>, [<% var validators = field.fieldValidateRules; for (idx in validators) { %><% if (validators[idx] === 'required') { %>Validators.required<% } %><% if (validators[idx] === 'minlength') { %>Validators.minLength(<%= field.fieldValidateRulesMinlength %>)<% } %><% if (validators[idx] === 'maxlength') { %>Validators.maxLength(<%= field.fieldValidateRulesMaxlength %>)<% } %><% if (validators[idx] === 'min') { %>Validators.min(<%= field.fieldValidateRulesMin %>)<% } %><% if (validators[idx] === 'max') { %>Validators.max(<%= field.fieldValidateRulesMax %>)<% } %><% if (validators[idx] === 'pattern') { %>Validators.pattern(/<%= field.fieldValidateRulesPattern %>/)<% } %><% if (idx !== validators.length - 1) { %>, <% } %><%_ } _%>]<% } %>],
    <%_ }); _%>
    <%_ relationships.forEach(relationship => { _%>
    <%= relationship.relationshipFieldName %>: [null<% if (relationship.relationshipRequired) { %>, Validators.required<% } %>],
    <%_ }); _%>
  });

  constructor(
    protected dataUtils: DataUtils,
    protected eventManager: EventManager,
    protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
    <%_ relationships.forEach(relationship => { _%>
    protected <%= relationship.otherEntityName.toLowerCase() %>Service: <%= relationship.otherEntityAngularName %>Service,
    <%_ }); _%>
    protected activatedRoute: ActivatedRoute,
    protected fb: FormBuilder
  ) {}

  ngOnInit(): void {
    this.activatedRoute.data.subscribe(({ <%= entityInstance %> }) => {
      this.<%= entityInstance %> = <%= entityInstance %>;
      if (<%= entityInstance %>) {
        this.updateForm(<%= entityInstance %>);
      }

      this.loadRelationshipsOptions();
    });
  }

  byteSize(base64String: string): string {
    return this.dataUtils.byteSize(base64String);
  }

  openFile(base64String: string, contentType: string | null | undefined): void {
    this.dataUtils.openFile(base64String, contentType);
  }

  setFileData(event: Event, field: string, isImage: boolean): void {
    this.dataUtils.loadFileToForm(event, this.editForm, field, isImage).subscribe({
      error: (err: FileLoadError) =>
        this.eventManager.broadcast(new EventWithContent<AlertError>('error', { ...err, key: 'error.file.' + err.key })),
    });
  }

  previousState(): void {
    window.history.back();
  }

  save(): void {
    this.isSaving = true;
    const <%= entityInstance %> = this.createFrom<%= entityAngularName %>();
    if (<%= entityInstance %>.<%= primaryKey.name %> !== undefined) {
      this.subscribeToSaveResponse(this.<%= entityInstance %>Service.update(<%= entityInstance %>));
    } else {
      this.subscribeToSaveResponse(this.<%= entityInstance %>Service.create(<%= entityInstance %>));
    }
  }

  protected subscribeToSaveResponse(result: Observable<HttpResponse<I<%= entityAngularName %>>>): void {
    result.pipe(finalize(() => this.onSaveFinalize())).subscribe(
      () => this.onSaveSuccess(),
      () => this.onSaveError()
    );
  }

  protected onSaveSuccess(): void {
    this.previousState();
  }

  protected onSaveError(): void {
    // Api for inheritance.
  }

  protected onSaveFinalize(): void {
    this.isSaving = false;
  }

  protected updateForm(<%= entityInstance %>: I<%= entityAngularName %>): void {
    this.editForm.patchValue({
      <%_ fields.forEach(field => { _%>
      <%= field.fieldName %>: <%= entityInstance %>.<%= field.fieldName %>,
      <%_ }); _%>
      <%_ relationships.forEach(relationship => { _%>
      <%= relationship.relationshipFieldName %>: <%= entityInstance %>.<%= relationship.relationshipFieldName %>,
      <%_ }); _%>
    });
  }

  protected loadRelationshipsOptions(): void {
    <%_ relationships.forEach(relationship => { _%>
    this.<%= relationship.otherEntityName.toLowerCase() %>Service
      .query({ page: 0, size: 100 })
      .pipe(map((res: HttpResponse<I<%= relationship.otherEntityAngularName %>[]>) => res.body ?? []))
      .pipe(map((<%= relationship.otherEntityNamePlural.toLowerCase() %>: I<%= relationship.otherEntityAngularName %>[]) => this.convert<%= relationship.otherEntityAngularName %>Response(<%= relationship.otherEntityNamePlural.toLowerCase() %>)))
      .subscribe((<%= relationship.otherEntityNamePlural.toLowerCase() %>: I<%= relationship.otherEntityAngularName %>[]) => (this.<%= relationship.otherEntityNamePlural.toLowerCase() %>Collection = <%= relationship.otherEntityNamePlural.toLowerCase() %>));
    <%_ }); _%>
  }

  protected createFrom<%= entityAngularName %>(): I<%= entityAngularName %> {
    return {
      ...new <%= entityAngularName %>(),
      <%_ fields.forEach(field => { _%>
      <%= field.fieldName %>: this.editForm.get(['<%= field.fieldName %>'])!.value,
      <%_ }); _%>
      <%_ relationships.forEach(relationship => { _%>
      <%= relationship.relationshipFieldName %>: this.editForm.get(['<%= relationship.relationshipFieldName %>'])!.value,
      <%_ }); _%>
    };
  }

  <%_ relationships.forEach(relationship => { _%>
  protected convert<%= relationship.otherEntityAngularName %>Response(<%= relationship.otherEntityNamePlural.toLowerCase() %>: I<%= relationship.otherEntityAngularName %>[]): I<%= relationship.otherEntityAngularName %>[] {
    return <%= relationship.otherEntityNamePlural.toLowerCase() %>.map(entity => this.convert<%= relationship.otherEntityAngularName %>FromServer(entity));
  }

  protected convert<%= relationship.otherEntityAngularName %>FromServer(entity: I<%= relationship.otherEntityAngularName %>): I<%= relationship.otherEntityAngularName %> {
    return Object.assign({}, entity);
  }
  <%_ }); _%>
} 